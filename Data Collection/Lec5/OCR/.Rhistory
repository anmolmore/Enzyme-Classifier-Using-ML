setwd("C:/Users/31072/Desktop/OCR")
getwd()    # check if wd path is OK.
if (!(require(tesseract))) {install.packages("tesseract")};  library(tesseract)
if (!(require(Hmisc))) {install.packages("Hmisc")};  library(Hmisc)
if (!(require(xml2))) {install.packages("xml2")};  library(xml2)
if (!(require(stringr))) {install.packages("stringr")};  library(stringr)
if (!(require(tibble))) {install.packages("tibble")};  library(tibble)
if (!(require(pdftools))) {install.packages("pdftools")};  library(pdftools)
})
# prelims - set working directory ---------
#setwd("C:\\Users\\20052\\Dropbox\\teaching related\\CBA teaching\\DC batch 12 CBA\\DC\\Lec 5\\OCR\\")
getwd()    # check if wd path is OK.
suppressPackageStartupMessages({
# load libraries including tesseract for OCR
if (!(require(tesseract))) {install.packages("tesseract")};  library(tesseract)
if (!(require(Hmisc))) {install.packages("Hmisc")};  library(Hmisc)
if (!(require(xml2))) {install.packages("xml2")};  library(xml2)
if (!(require(stringr))) {install.packages("stringr")};  library(stringr)
if (!(require(tibble))) {install.packages("tibble")};  library(tibble)
if (!(require(pdftools))) {install.packages("pdftools")};  library(pdftools)
})
## load image data needed in png or jpg etc.
test.text = "./test-text.png"
# Text output via standard ocr() func
system.time({
text <- ocr(test.text)   # only URL of image needed, not loaded image itself.
})   # 0.28 secs
cat(text)   # view result
# OCR-analyzing varying text -------------
system.time({
varying.text = ocr("./varying-text.png")
})    # 0.10 secs
varying.text
# Post-process OCR into multi-line text ---------
# We'll use Hmisc::string.break.line()
varying.text1 = string.break.line(varying.text)
varying.text1
nutrition.text = "./the-nutritional-label.jpg"
system.time({ nutrition.text = ocr("./the-nutritional-label.jpg") })    # 5.4 secs
nutrition.text   # view the text. check with original
class(nutrition.text)
# post-processing into multi-line text with Hmisc::string.break.line()
library(Hmisc)
nutrition.text1 = string.break.line(nutrition.text)
nutrition.text1
system.time({
xml = ocr("./test-text.png", HOCR = TRUE) })   # 0.28 secs
cat(xml)   # a markup file will display
## extracting neat df out of hocr metadata markup above
library(xml2)
library(stringr)
library(tibble)
doc <- read_xml(xml)   # note similarity with rvest::read_html()
# Examine 'doc' and ID nodes & attributes of interest to mine.
nodes <- xml_find_all(doc, ".//span[@class='ocrx_word']")    # using xpath instead of css selectors
words <- xml_text(nodes)    # analogous to rvest::html_text()
metatext <- xml_attr(nodes, 'title')  # ~ rvest::hml_attr()
# extract geom co-ords of 'bounding box' or bbox around ocr text
bbox <- str_replace(str_extract(metatext, "bbox [\\d ]+"), "bbox ", "")
# Recognition confidence metrics
conf <- as.numeric(str_replace(str_extract(metatext, "x_wconf.*"), "x_wconf ", ""))
# build df now
tibble(confidence = conf, word = words, bbox = bbox)
library(pdftools)
system.time({
curl::curl_download("https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf", "R-intro.pdf")
orig <- pdftools::pdf_text("R-intro.pdf")[1]
})    # 10.41 secs
# view original text we are extracting
orig
# Render pdf to png image using pdf_convert()
system.time({
img_file <- pdftools::pdf_convert("R-intro.pdf", format = 'tiff', pages = 1, dpi = 400)
})    # 0.21 secs
# Now Extract text from png image
system.time({ text <- ocr(img_file) })    # 1.85 secs
unlink(img_file)    # Deleting done Files and Directories
cat(text)
# load libraries needed
suppressPackageStartupMessages({
suppressWarnings({
if (!(require(Hmisc))) {install.packages("Hmisc")};    library(Hmisc)
if (!(require(VIM))) {install.packages("VIM")};    library(VIM)
if (!(require(mice))) {install.packages("mice")};    library(mice)
if (!(require(magrittr))) {install.packages("magrittr")};    library(magrittr)
})
})
## using VIM::kNN()
data(sleep)
str(sleep)
# Try ?kNN for  func parms
a0 = kNN(sleep, variable = c("NonD","Gest"))
str(a0)    # compare with str(sleep)
## ---------------
## get the nhanes dataset
dat <- mice::nhanes    # try '?nhanes'
str(dat)    # colms are {age, bmi, hypertensive (Y/N), serum cholestrol}
summary(dat)
# looking at missing data pattern using md.pattern()
md.pattern(dat)
## ----------
library(VIM)
aggr_plot <- aggr(dat,
# display parms
col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(dat),
# graphical parms
cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
# using mice::mice() to impute
system.time({
imp <- mice(dat,     # data
m = 3,        # no. of multiple imputations
print=F)
})    # 0.41 secs
class(imp)    # a 'mids' object 0 output list with 18 elements
imputed_dataset_1<-complete(imp, 1)   # Fills in missing vals in tgt dataset. Try '?complete'.
head(imputed_dataset_1)
head(dat)    # compare with orig dataset
meth<-imp$method
meth
