library(wordcloud)
library(igraph)
library(ggraph)
## reading in IBM analyst call data from my git
ibm = readLines('https://raw.githubusercontent.com/sudhir-voleti/sample-data-sets/master/International%20Business%20Machines%20(IBM)%20Q3%202016%20Results%20-%20Earnings%20Call%20Transcript.txt')  #IBM Q3 2016 analyst call transcript
# ibm = readLines(file.choose())  # read from local file on disk
head(ibm, 10)   # view a few lines
if (!require(tm)) {install.packages("tm")}
if (!require(wordcloud)) {install.packages("wordcloud")}
if (!require(igraph)) {install.packages("igraph")}
if (!require(ggraph)) {install.packages("ggraph")}
if (!require(tidytext)) {install.packages("tidytext")}
if (!require(widyr)) {install.packages("widyr")}
library(tm)
library(tidyverse)
library(tidytext)
library(wordcloud)
library(igraph)
library(ggraph)
library(shiny)
server = function(input,output,session)#
ui = basicPage("NLP")# the user interface
shinyApp(ui=ui,server = server)# app launch
server = function(input,output,session)
ui = basicPage("NLP")# the user interface
shinyApp(ui=ui,server = server)# app launch
shinyApp(ui = ui,server = server)# app launch
library("shiny")
server = function(input,output,session)
ui = basicPage("NLP")# the user interface
shinyApp(ui = ui,server = server)# app launch
server = function(input,output,session){}
ui = basicPage("NLP")# the user interface
shinyApp(ui = ui,server = server)# app launch
?checkboxInput
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Factor Y")
)
shinyApp(ui = ui, server = server)
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "c("Noun","Adjective")
)
shinyApp(ui = ui, server = server)
## Making the app reactive
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write here"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
## using reactive and render in one app
server <- function(input, output, session) {
data <- reactive({
rnorm(50) * input$myslider
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
}
ui <- basicPage(
h1("Using Reactive"),
sliderInput(inputId = "myslider",
label = "Slider1",
value = 1, min = 1, max = 20),
plotOutput("plot")
)
shinyApp(ui = ui, server = server)
## layouting - basic sidebar layout
server <- function(input, output, session) {}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
"my sidebar"
),
mainPanel(
"my mainpanel"
)
)
)
shinyApp(ui = ui, server = server)
## layouting - tabsets
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel("using Tabsets"), # our title
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "s1",
label = "My Slider",
value = 1, min = 1, max = 20)
),
mainPanel(
tabsetPanel(
tabPanel("Tab1", "First Tab"),
tabPanel("Tab2", "Second Tab"),
tabPanel("Tab3", "Third Tab")
)
)
)
)
shinyApp(ui = ui, server = server)
####
names(tags)
####
## Tags
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel(strong("This is the STRONG tag on the Title")), # using strong as a direct tag
sidebarLayout(
sidebarPanel(
withTags(
div(
b("bold text: here you see a line break, a horizontal line and some code"),
br(),
hr(),
code("plot(lynx)")
))),
mainPanel(
tabsetPanel(
tabPanel("Weblinks with direct tag a", a(href="www.r-tutorials.com", "r-tutorials")),
tabPanel(tags$b("Using b for bold text"), tags$b("a bold text")),
tabPanel("Citations with the blockquote tag", tags$blockquote("R is Great", cite = "R Programmer"))
)
)
))
shinyApp(ui = ui, server = server)
## changing the themes
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
ui <- fluidPage(themeSelector(), # displaying the different themes, replace this line when publishing with theme = shinytheme("darkly")
titlePanel(strong("This is the STRONG tag on the Title")), # using strong as a direct tag
sidebarLayout(
sidebarPanel(
withTags(
div(
b("bold text: here you see a line break, a horizontal line and some code"),
br(),
hr(),
code("plot(lynx)")
))),
mainPanel(
tabsetPanel(
tabPanel("Weblinks with direct tag a", a(href="www.r-tutorials.com", "r-tutorials")),
tabPanel(tags$b("Using b for bold text"), tags$b("a bold text")),
tabPanel("Citations with the blockquote tag", tags$blockquote("R is Great", cite = "R Programmer"))
)
)
))
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "c("Noun",Adjective)
)
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "c("Noun",Adjective)
)
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "c(Noun,Adjective)
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Factor Y")
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Factor Y")
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Factor Y")
)
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun Y")
)
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun Y",value = TRUE)
)
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun",value = TRUE,)
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun Y",value = TRUE,)
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun Y",value = TRUE,)
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun Y",value = TRUE,)
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun Y",value = TRUE)
)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Noun")
)
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxGroupInput(inputId = "word List",)
)
shinyApp(ui = ui, server = server)
?observe
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write here"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write here"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write there"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write there"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write there"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
?sidebarPanel()
install.packages("shinythemes")
library("shinythemes")
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel("Text Summarization Shiny App"), # our title
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "s1",
label = "My Slider",
value = 1, min = 1, max = 20)
),
mainPanel(
tabsetPanel(
tabPanel("Tab1", "First Tab"),
tabPanel("Tab2", "Second Tab"),
tabPanel("Tab3", "Third Tab")
)
)
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel("Text Summarization Shiny App"), # our title
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "s1",
label = "My Slider",
value = 1, min = 1, max = 20)
),
mainPanel(
tabsetPanel(
tabPanel("Overview", "First Tab"),
tabPanel("Article Sentences", "Second Tab"),
tabPanel("Article Summary, "Third Tab"),
tabPanel("Sentence_Scores Plot","Fourth Tab"),
)
)
)
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel("Text Summarization Shiny App"), # our title
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "s1",
label = "My Slider",
value = 1, min = 1, max = 20)
),
mainPanel(
tabsetPanel(
tabPanel("Overview", "First Tab"),
tabPanel("Article Sentences", "Second Tab"),
tabPanel("Article Summary, "Third Tab")
)
)
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel("Text Summarization Shiny App"), # our title
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "s1",
label = "My Slider",
value = 1, min = 1, max = 20)
),
mainPanel(
tabsetPanel(
tabPanel("Overview", "First Tab"),
tabPanel("Article Sentences", "Second Tab"),
tabPanel("Article Summary, "Third Tab")
)
)
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel("Text Summarization Shiny App"), # our title
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "s1",
label = "My Slider",
value = 1, min = 1, max = 20)
),
mainPanel(
tabsetPanel(
tabPanel("Overview", "First Tab"),
tabPanel("Article Sentences", "Second Tab"),
tabPanel("Article Summary, "Third Tab")
)
)
)
)
shinyApp(ui = ui, server = server)
runApp('C:/Users/Shubhendu Vimal/Desktop/Shiny/Shiny 2.R')
server = function(input,output) {
}
ui = navbarPage("Integration of different media types",
tabPanel("Image sourced locally",
tags$img(src = "logo.png", width = "100px", height = "100px")),
tabPanel("Video sourced locally",
tags$video(src = "comist.mp4", type = "video/mp4", controls = T,
width = "900px", height = "800px")),
tabPanel("Pdf sourced online, Iframe",
tags$iframe(style="height:600px; width:100%; scrolling=yes",
src="https://cran.r-project.org/web/packages/shiny/shiny.pdf")),
tabPanel("Text as .txt",
includeText("mytxt.txt"))
)
shinyApp(ui = ui, server = server)
server = function(input,output) {
}
ui = navbarPage("Integration of different media types",
tabPanel("Image sourced locally",
tags$img(src = "logo.png", width = "100px", height = "100px")),
tabPanel("Video sourced locally",
tags$video(src = "comist.mp4", type = "video/mp4", controls = T,
width = "900px", height = "800px")),
tabPanel("Pdf sourced online, Iframe",
tags$iframe(style="height:600px; width:100%; scrolling=yes",
src="https://cran.r-project.org/web/packages/shiny/shiny.pdf")),
tabPanel("Text as .txt",
includeText("mytxt.txt"))
)
shinyApp(ui = ui, server = server)
try(require("shiny")||install.packages("shiny"))
try(require("nFactors")||install.packages("nFactors"))
library(nFactors)
library(nFactors)
library(nFactors)
library(nFactors)
try(require("qgraph")||install.packages("qgraph"))
library(qgraph)
library(corrplot)
setwd("C:/Users/Shubhendu Vimal/Desktop/Test")
cwd()
swd()
getwd()
try(require("corrplot")||install.packages("corrplot"))
library(corrplot)
library(qgraph)
library(nFactors)
if (!require(udpipe)){install.packages("udpipe")}
if (!require(textrank)){install.packages("textrank")}
if (!require(textrank)){install.packages("textrank")}
library("textrank")
if (!require(lattice)){install.packages("lattice")}
library("lattice")
if (!require(igraph)){install.packages("igraph")}
library("igraph")
library("gggraph")
if (!require(ggraph)){install.packages("ggraph")}
library("gggraph")
library("ggraph")
if (!require(wordcloud)){install.packages("wordcloud")}
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library("RColorBrewer")
library("wordcloud")
library(udpipe)
library(textrank)
library(lattice)
library(igraph)
library(ggraph)
library(ggplot2)
library(wordcloud)
library(stringr)
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
getwd()
getwd()
getwd()
runApp()
