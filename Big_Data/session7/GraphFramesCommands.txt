from graphframes import *

vertices = sqlContext.createDataFrame([
  ("a", "Alice", 34),
  ("b", "Bob", 36),
  ("c", "Charlie", 30),
  ("d", "David", 29),
  ("e", "Esther", 32),
  ("f", "Fanny", 36),
  ("g", "Gabby", 60)], ["id", "name", "age"])

edges = sqlContext.createDataFrame([
  ("a", "b", "friend"),
  ("b", "c", "follow"),
  ("c", "b", "follow"),
  ("f", "c", "follow"),
  ("e", "f", "follow"),
  ("e", "d", "friend"),
  ("d", "a", "friend"),
  ("a", "e", "friend")
], ["src", "dst", "relationship"])


g = GraphFrame(vertices, edges)
print g

g.vertices.show()

g.edges.show()

g.inDegrees.show()

g.outDegrees.show()

g.degrees.show()

#Run queries directly on vertices DataFrame
youngest = g.vertices.groupBy().min("age")
youngest.show()

#Run queries on edges DataFrame
numFollows = g.edges.filter("relationship = 'follow'").count()
print "The number of follow edges is", numFollows

#Complex relationships
# Search for pairs of vertices with edges in both directions between them.
motifs = g.find("(a)-[e]->(b); (b)-[e2]->(a)")
motifs.show()

#Queries on top of motif
filtered = motifs.filter("b.age > 30 or a.age > 30")
filtered.show()

#Constructing sub-graphs
paths = g.find("(a)-[e]->(b)").filter("e.relationship = 'follow'").filter("a.age < b.age")

e2 = paths.select("e.src", "e.dst", "e.relationship")

g2 = GraphFrame(g.vertices, e2)

g2.vertices.show()

#Graph algorithms
#BFS
paths = g.bfs("name = 'Esther'", "age < 32")
paths.show()

filteredPaths = g.bfs(
  fromExpr = "name = 'Esther'",
  toExpr = "age < 32",
  edgeFilter = "relationship != 'friend'",
  maxPathLength = 3)

filteredPaths.show()

#Community Detection
result = g.labelPropagation(maxIter=5)
result.show()

#PageRank algorithm
results = g.pageRank(resetProbability=0.15, tol=0.01)
results.vertices.show()

results.edges.show()


#Shortest Path
results = g.shortestPaths(landmarks=["a", "d"])
results.show()

# Save vertices and edges as Parquet to some location.
g.vertices.write.parquet("hdfs://myLocation/vertices")
g.edges.write.parquet("hdfs://myLocation/edges")

# Load the vertices and edges back.
sameV = sqlContext.read.parquet("hdfs://myLocation/vertices")
sameE = sqlContext.read.parquet("hdfs://myLocation/edges")

# Create an identical GraphFrame.
sameG = GraphFrame(sameV, sameE)
